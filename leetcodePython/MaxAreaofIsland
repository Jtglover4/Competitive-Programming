class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:

        self.visited = [[0]*len(grid[0]) for _ in range(len(grid))]
        self.maxx = 0
        self.temp = 0

        def bfs(grid: List[List[int]], row:int, col: int):

            if(row > 0 and grid[row-1][col] == 1 and self.visited[row-1][col] == 0):
                self.temp +=1
                self.visited[row-1][col] = 1
                bfs(grid, row-1, col)

            if(col > 0 and grid[row][col-1]== 1 and self.visited[row][col-1] == 0):
                self.temp += 1
                self.visited[row][col-1] = 1
                bfs(grid, row, col-1)

            if(row < len(grid)-1 and grid[row+1][col] == 1 and self.visited[row+1][col] == 0):
                self.temp += 1
                self.visited[row+1][col] = 1
                bfs(grid, row+1, col)

            if(col < len(grid[0])-1 and grid[row][col+1] == 1 and self.visited[row][col+1] == 0):
                self.temp += 1
                self.visited[row][col+1] = 1
                bfs(grid, row, col+1)


        for i in range(len(grid)):
            for j in range(len(grid[0])):

                if(self.visited[i][j] == 0 and grid[i][j] == 1):

                    self.temp = 1
                    self.visited[i][j] = 1
                    bfs(grid, i, j)
                    if(self.temp > self.maxx):
                        self.maxx = self.temp
        
        return self.maxx
